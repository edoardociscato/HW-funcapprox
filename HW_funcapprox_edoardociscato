module funcapp

	# here are the packages I used

	using FastGaussQuadrature
	using Roots
	using PyPlot
	using Distributions
	using ApproXD

	# auxiliary functions

	mapadj(a,b,x)=(x.*(b-a))/2+(a+b)/2

	function ChebPol(nodes,deg)
	n=length(nodes)

	end


	# use chebyshev to interpolate this:
	function q1(n)
	nodes,w=gausslegendre(n);
	a=-3;	b=3;
	nodes=mapadj(a,b,nodes);
	f(x) = x + 2x.^2 - exp(-x);
	inter=f(nodes);
	nodes,w=gausslegendre(n);
	deg=n-1;
	Phi=zeros(n,deg+1);
	for i=0:deg
		Phi[:,i+1]=cos(acos(nodes)*i);
	end
	c=inv(Phi)*inter;
	n_new=50;
	newnodes,w=gausslegendre(n_new);
	newPhi=zeros(n_new,deg+1);
	for i=0:deg
		newPhi[:,i+1]=cos(acos(newnodes)*i);
	end
	fhat=newPhi*c;
	figure()
	title("q1")
	plot(linspace(a,b,1000),map(f,linspace(a,b,1000)))
	scatter(mapadj(a,b,newnodes),fhat)
	err=maximum(fhat-f(mapadj(a,b,newnodes)));
	if err<1e-9
		test="successful";
	else
		test="unsuccessful";
	end
	res=string("My version of Chebyshev Polynomial and basis function with ", n, " nodes: the interpolation was ", test, " (max residual equal to ", err, ")");
	println("EXERCISE 1")
	println(res)
	end

	function q2(n)
		
	end


	# plot the first 9 basis Chebyshev Polynomial Basisi Fnctions
	function q3(n)
	nodes,w=gausslegendre(n);
	chebyshev(x,deg)=cos(acos(x)*deg);
	figure(1);
	title("q3")
	for i=0:8
		f(x)=chebyshev(x,i);
		subplot(331+i)
		title(string("Basis ", i))
		plot(linspace(-1,1,1000),map(f,linspace(-1,1,1000)))
		scatter(nodes,f(nodes))
	end
	end

	ChebyT(x,deg) = cos(acos(x)*deg)
	unitmap(x,lb,ub) = 2.*(x.-lb)/(ub.-lb) - 1	#[a,b] -> [-1,1]

	type ChebyType
		f::Function # fuction to approximate 
		nodes::Union{Vector,LinSpace} # evaluation points
		basis::Matrix # basis evaluated at nodes
		coefs::Vector # estimated coefficients

		deg::Int 	# degree of chebypolynomial
		lb::Float64 # bounds
		ub::Float64

		# constructor
		function ChebyType(_nodes::Union{Vector,LinSpace},_deg,_lb,_ub,_f::Function)
			n = length(_nodes)
			y = _f(_nodes)
			_basis = Float64[ChebyT(unitmap(_nodes[i],_lb,_ub),j) for i=1:n,j=0:_deg]
			_coefs = _basis \ y  # type `?\` to find out more about the backslash operator. depending the args given, it performs a different operation
			# create a ChebyType with those values
			new(_f,_nodes,_basis,_coefs,_deg,_lb,_ub)
		end
	end
	
	# function to predict points using info stored in ChebyType
	function predict(Ch::ChebyType,x_new)

		true_new = Ch.f(x_new)
		basis_new = Float64[ChebyT(unitmap(x_new[i],Ch.lb,Ch.ub),j) for i=1:length(x_new),j=0:Ch.deg]
		basis_nodes = Float64[ChebyT(unitmap(Ch.nodes[i],Ch.lb,Ch.ub),j) for i=1:length(Ch.nodes),j=0:Ch.deg]
		preds = basis_new * Ch.coefs
		preds_nodes = basis_nodes * Ch.coefs

		return Dict("x"=> x_new,"truth"=>true_new, "preds"=>preds, "preds_nodes" => preds_nodes)
	end

	function q4a(deg=(5,9,15),lb=-1.0,ub=1.0)
	f(x) = 1./(1+25x.^2);
	a=-5; b=5;
	n_new=50;
	col=["b","g","r"]
	figure()
	subplot(121)
	title("q4a")
	plot(linspace(a,b,1000),map(f,linspace(a,b,1000)),color="k")
	for i=1:3
		Deg=deg[i];
		n=Deg+1;
		cheb=ChebyType(linspace(a,b,n),Deg,a,b,f);
		newnodes=linspace(a,b,n_new);
		fval=predict(cheb,newnodes);
		scatter(newnodes,fval["preds"],color=col[i],label=string("Degree ", Deg));
	end	
	subplot(122)
	plot(linspace(a,b,1000),map(f,linspace(a,b,1000)),color="k")
	for i=1:3
		Deg=deg[i];
		n=Deg+1;
		nodes,w=gausslegendre(n);
		nodes=mapadj(a,b,nodes);
		cheb=ChebyType(nodes,Deg,a,b,f);
		newnodes=linspace(a,b,n_new);
		fval=predict(cheb,newnodes);
		p=scatter(newnodes,fval["preds"],color=col[i],label=string("Degree ", Deg));	
		legend()
	end
	end

	function q4b()
	f(x) = 1./(1+25x.^2);
	a=-5; b=5; n=13; Deg=3;
	nevals=5*n;
	bs=BSpline(n,Deg,a,b); #knots, degree, interval
	B=full(getBasis(collect(linspace(a,b,n+Deg-1)),bs));
	inter=f(linspace(a,b,n+Deg-1));
	c=inv(B)*inter;
	B=full(getBasis(collect(linspace(a,b,nevals)),bs));
	fval1=B*c;	
	figure()
	subplot(121)
	title("q4b")
	a=-5; b=5;
	plot(linspace(a,b,1000),map(f,linspace(a,b,1000)),color="k")
	scatter(linspace(a,b,nevals),fval1,color="r",label="Equally spaced knots")
	legend()
	subplot(122);
	a=-5; b=5;
	plot(linspace(a,b,1000),zeros(1000),color="k")
	scatter(linspace(a,b,nevals),fval1-map(f,linspace(a,b,nevals)),color="r",label="Equally spaced knots")
	legend()
	res=string("I got stuck at the computation of basis functions with manually chosen knots. Is there a quick way to do that?");
	println("EXERCISE 4")
	println(res);
	end

	function q5()
	res=string("I avoided ");	
	println(res);		
	end


		# function to run all questions
	function runall()
		println("running all questions of HW-funcapprox:")
		q1(15)
		q2(15)
		q3(15)
		q4a()
		q4b()
		q5()
	end


end
